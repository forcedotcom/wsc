connection(gen) ::= <<
package $gen.packageName$;

import com.sforce.ws.ConnectionException;
import com.sforce.ws.ConnectorConfig;
import com.sforce.ws.bind.XMLizable;
import com.sforce.ws.bind.TypeMapper;

import java.util.HashMap;

import javax.xml.namespace.QName;

/**
 * Generated by ConnectionCodeGenerator.java. Please do not edit.
 */
public class $gen.className$ {

  private TypeMapper __typeMapper = new TypeMapper();
  private ConnectorConfig __config;
  private HashMap<QName, XMLizable> __extraHeaders = new HashMap<QName, XMLizable>();

  public ConnectorConfig getConfig() {
    return __config;
  }

$gen.headersMetadata: { header |
  private $header.type$ __$header.name$;

  public void set$header.name$($header.args$) {
    __$header.name$ = new $header.type$();
$header.elements : { ael |
    __$header.name$.$ael.setMethod$($ael.name$);$\n$}$  \}

  public void clear$header.name$() {
    __$header.name$ = null;
  \}

  public $header.type$ get$header.name$() {
    return  __$header.name$;
  \}

  public void __set$header.name$($header.type$ __header) {
    __$header.name$ = __header ;
  \}

}$

  public $gen.className$(ConnectorConfig config) throws ConnectionException {
    this.__config = config;
    this.__typeMapper.setPackagePrefix($gen.packagePrefix$);
    this.__typeMapper.setConfig(config);

    $ if (gen.hasLoginCall)$
    config.$gen.verifyEndpoint$();
    if (!config.isManualLogin()) {
      if (config.getSessionId()==null) {
        config.setServiceEndpoint(config.getAuthEndpoint());
        $gen.loginResult$ result = login(config.getUsername(), config.getPassword());
        config.setSessionId(result.getSessionId());
        config.setServiceEndpoint(result.getServerUrl());
      } else {
        if (config.getServiceEndpoint() == null) {
          throw new com.sforce.ws.ConnectionException("Please set ServiceEndpoint");
        }
      }
    }
    $endif$

    $if (gen.hasSessionHeader)$
      __SessionHeader = new SessionHeader_element();
      __SessionHeader.setSessionId(config.getSessionId());
    $endif$
  }

  private com.sforce.ws.transport.SoapConnection newConnection() {
      com.sforce.ws.transport.SoapConnection __c   = new com.sforce.ws.transport.SoapConnection(
           __config.getServiceEndpoint(), $gen.sObjectNamespace$, __typeMapper, __config);

      __c.setConnection(this);
      __c.setKnownHeaders(knownHeaders);
      return __c;
   }

$gen.operations: { op |
  public $op.returnType$ $op.operationName$($op.argsWithClasses$)
       throws com.sforce.ws.ConnectionException {
    com.sforce.ws.transport.SoapConnection __connection = newConnection();
    $op.requestType$ __request = new $op.requestType$();
    $op.responseType$ __response = new $op.responseType$();

$op.elements : { ael |
    __request.$ael.setMethod$($ael.name$);$\n$}$
$op.headers : { header |
    if (__$header.name$ != null) __connection.addHeader($header.element$, __$header.name$);$\n$}$
    addHeaders(__connection);

    __response = ($op.responseType$) __connection.send($op.soapAction$,
       $op.requestName$, __request, $op.responseName$,
       $op.responseType$.class);

    $op.resultCall$
  \}}$

  private void addHeaders(com.sforce.ws.transport.SoapConnection __connection) {
    for(java.util.Map.Entry<QName, XMLizable> entry : __extraHeaders.entrySet()) {
      __connection.addHeader(entry.getKey(), entry.getValue());
    }
  }

  public void addExtraHeader(QName __headerName, XMLizable __value) {
    __extraHeaders.put(__headerName, __value);
  }

  public void removeExtraHeader(QName __headerName) {
    __extraHeaders.remove(__headerName);
  }

  public XMLizable getExtraHeader(QName __headerName) {
    return __extraHeaders.get(__headerName);
  }
	
  public void clearExtraHeaders() {
    __extraHeaders = new HashMap<QName, XMLizable>();
  }

$gen.qNames$

  private static HashMap<QName, java.lang.Class> knownHeaders = new HashMap<QName, java.lang.Class>();

  static {
    $gen.knownHeaders$  }
}

>>