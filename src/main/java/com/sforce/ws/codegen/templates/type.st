type(gen) ::=<<
package $gen.packageName$;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class $gen.className$ $gen.typeExtension$ $gen.interfaceExtension${

    /**
     * Constructor
     */
    public $gen.className$() {}
    
  $gen.memberMetadataList: {member |
  /**
   * element : $member.elementDoc$
   * java type: $member.javaType$
   */
  private static final com.sforce.ws.bind.TypeInfo $member.fieldName$__typeInfo =
    new com.sforce.ws.bind.TypeInfo($member.typeInfo$);

  private boolean $member.fieldName$__is_set = false;

  private $member.javaType$ $member.fieldName$$member.arraySource$;

  $if(gen.generateInterfaces)$@Override$endif$
  public $member.javaType$ $member.getMethodName$() {
    return $member.fieldName$;
  \}

  $if(member.booleanJavaType)$
  $if(gen.generateInterfaces)$@Override$endif$
  public $if(gen.generateInterfaces)$$member.javaTypeInterface$$else$$member.javaType$$endif$ $member.boolMethodName$() {
    return $member.fieldName$;
  \}
$endif$

  $if(gen.generateInterfaces)$@Override$endif$
  public void $member.setMethodName$($if(gen.generateInterfaces)$$member.javaTypeInterface$$else$$member.javaType$$endif$ $member.fieldName$) {
    $if(member.isArray)$
    this.$member.fieldName$ = $if(gen.generateInterfaces)$$member.arrayCast$$else$$member.fieldName$$endif$;
    $else$
    this.$member.fieldName$ = $if(gen.generateInterfaces)$$member.castFromInterface$$endif$$member.fieldName$;
    $endif$
    $member.fieldName$__is_set = true;
  \}

  protected void $member.setMethodName$(com.sforce.ws.parser.XmlInputStream __in,
      com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
    __in.peekTag();
    if (__typeMapper.$member.loadType$(__in, $member.fieldName$__typeInfo)) {
      $member.setMethodName$($member.cast$__typeMapper.$member.loadMethod$(__in, $member.fieldName$__typeInfo, $member.javaType$.class));
    \}
  \}

   }$    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      $gen.xsiType$
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }
   
    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       $gen.superWrite$
$gen.memberMetadataList: { member |
       __typeMapper.$member.writeMethod$(__out, $member.fieldName$__typeInfo, $member.fieldName$, $member.fieldName$__is_set);
}$    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    \}
    
    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        $gen.superLoad$
$gen.memberMetadataList:{ member |
        $member.setMethodName$(__in, __typeMapper);
}$    }

    private static final String[] MEMBER_NAMES = {
      $gen.memberMetadataList: { member |
      "$member.fieldName$",
}$
    };
    
    @Override
    public String toString() {
      Object[] memberValues = {
      $gen.memberMetadataList: { member |
        $member.fieldName$,
}$
      };
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[$gen.className$ ");
      for (i = 0; i < MEMBER_NAMES.length; i++) {
        sb.append(' ')
           .append(MEMBER_NAMES[i])
           .append("='")
           .append(com.sforce.ws.util.Verbose.toString(memberValues[i]))
           .append("'\\n");
      }
      return sb.toString();
    }
    
    $if(gen.generateInterfaces && gen.hasArrayField)$
    @SuppressWarnings("unchecked")
    private <T,U> T[] castArray(Class<T> clazz, U[] array) {
        if (array == null) {
            return null;
        }
        T[] retVal = (T[]) java.lang.reflect.Array.newInstance(clazz, array.length);
        for (int i=0; i < array.length; i++) {
            retVal[i] = (T)array[i];
        }
        	    
        return retVal;
	}
	$endif$
}

>>