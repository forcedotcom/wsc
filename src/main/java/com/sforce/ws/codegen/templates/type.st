type(gen) ::=<<
package $gen.packageName$;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class $gen.className$ $gen.typeExtension$ $gen.interfaceExtension${

    /**
     * Constructor
     */
    public $gen.className$() {}
    
  $gen.memberMetadataList: {member |
  /**
   * element : $member.elementDoc$
   * java type: $member.javaType$
   */
  private static final com.sforce.ws.bind.TypeInfo $member.fieldName$__typeInfo =
    new com.sforce.ws.bind.TypeInfo($member.typeInfo$);

  private boolean $member.fieldName$__is_set = false;

  private $member.javaType$ $member.fieldName$$member.arraySource$;

  $if(gen.generateInterfaces)$@Override$endif$
  public $member.javaType$ $member.getMethodName$() {
    return $member.fieldName$;
  \}

  $if(member.booleanJavaType)$
  $if(gen.generateInterfaces)$@Override$endif$
  public $if(gen.generateInterfaces)$$member.javaTypeInterface$$else$$member.javaType$$endif$ $member.boolMethodName$() {
    return $member.fieldName$;
  \}
$endif$

  $if(gen.generateInterfaces)$@Override$endif$
  public void $member.setMethodName$($if(gen.generateInterfaces)$$member.javaTypeInterface$$else$$member.javaType$$endif$ $member.fieldName$) {
    this.$member.fieldName$ = $if(gen.generateInterfaces)$$member.castFromInterface$$endif$$member.fieldName$;
    $member.fieldName$__is_set = true;
  \}
  
   }$    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      $gen.xsiType$
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }
   
    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       $gen.superWrite$
$gen.memberMetadataList: { member |
       __typeMapper.$member.writeMethod$(__out, $member.fieldName$__typeInfo, $member.fieldName$, $member.fieldName$__is_set);
}$    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    \}
    
    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        $gen.superLoad$
$gen.memberMetadataList:{ member |
        __in.peekTag();
        if (__typeMapper.$member.loadType$(__in, $member.fieldName$__typeInfo)) {
            $member.setMethodName$($member.cast$__typeMapper.$member.loadMethod$(__in, $member.fieldName$__typeInfo, $member.javaType$.class));
        \}
}$    }
    
    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[$gen.className$ ");
      $gen.superToString$$gen.memberMetadataList: { member |
      sb.append(" $member.fieldName$='").append(com.sforce.ws.util.Verbose.toString($member.fieldName$)).append("'\\n");
}$      sb.append("]\\n");
      return sb.toString();
    }
}

>>